local M = {}

local function get_fg(group, fallback)
    local ok, hl = pcall(vim.api.nvim_get_hl_by_name, group, true)
    if ok and hl and hl.foreground then
        return string.format("#%06x", hl.foreground)
    end
    return fallback
end

function M.make_background_transparent()
    local hl = vim.api.nvim_set_hl

    hl(0, "Normal", { bg = "none" })
    hl(0, "NormalNC", { bg = "none" })
    hl(0, "NormalFloat", { bg = "none", blend = 0 })
    hl(0, "FloatBorder", { bg = "none", blend = 0 })
    hl(0, "VertSplit", { bg = "none" })
    hl(0, "SignColumn", { bg = "none" })
    hl(0, "StatusLine", { bg = "none" })
    hl(0, "LineNr", { bg = "none" })
    hl(0, "CursorLineNr", { bg = "none" })
    hl(0, "LineNrAbove", { bg = "none" })
    hl(0, "LineNrBelow", { bg = "none" })
    hl(0, "TabLine", { bg = "none" })
    hl(0, "TabLineSel", { bg = "#2e2e2e", fg = "#A3D4D5" })
    hl(0, "TabLineFill", { bg = "none" })
    hl(0, "CursorLine", { bg = "#2e2e2e", blend = 90 })
    hl(0, "PopupNormal", { bg = "none" })
    hl(0, "PopupBorder", { bg = "none" })
    hl(0, "CmdlinePopup", { bg = "none", blend = 0 })
    hl(0, "CmdlinePopupBorder", { bg = "none", blend = 0 })
    hl(0, "CmdlinePopupTitle", { bg = "none" })

    hl(0, "NoiceCmdline", { bg = "none", blend = 0 })
    hl(0, "NoiceCmdlineBorder", { bg = "none", blend = 0 })
    hl(0, "NoiceCmdlinePopup", { bg = "none", blend = 0 })
    hl(0, "NoiceCmdlinePopupBorder", { bg = "none", blend = 0 })
    hl(0, "NoiceCmdlinePopupIcon", { bg = "none" })
    hl(0, "NoiceCmdlinePopupTitle", { bg = "none" })
    hl(0, "NoiceCmdlineIcon", { bg = "none" })
    hl(0, "NoiceCmdlinePrompt", { bg = "none" })
    hl(0, "NoicePopup", { bg = "none", blend = 0 })
    hl(0, "NoicePopupBorder", { bg = "none", blend = 0 })
    hl(0, "NoiceCmdlinePopupBorderCmdline", { bg = "none" })
    hl(0, "NoiceCmdlinePopupBorderSearch", { bg = "none" })
    hl(0, "NoicePopupmenu", { bg = "none" })
    hl(0, "NoicePopupmenuBorder", { bg = "none" })
    hl(0, "NoiceSplit", { bg = "none" })
    hl(0, "NoiceSplitBorder", { bg = "none" })

    hl(0, "TelescopeNormal", { bg = "none" })
    hl(0, "TelescopeBorder", { bg = "none" })
    hl(0, "TelescopePromptNormal", { bg = "none" })
    hl(0, "TelescopePromptBorder", { bg = "none" })
    hl(0, "TelescopePromptTitle", { bg = "none" })
    hl(0, "TelescopePreviewNormal", { bg = "none" })
    hl(0, "TelescopePreviewBorder", { bg = "none" })
    hl(0, "TelescopePreviewTitle", { bg = "none" })
    hl(0, "TelescopeResultsNormal", { bg = "none" })
    hl(0, "TelescopeResultsBorder", { bg = "none" })
    hl(0, "TelescopeResultsTitle", { bg = "none" })

    hl(0, "NotifyBackground", { bg = "none" })
    hl(0, "NotifyERRORBorder", { bg = "none" })
    hl(0, "NotifyWARNBorder", { bg = "none" })
    hl(0, "NotifyINFOBorder", { bg = "none" })
    hl(0, "NotifyDEBUGBorder", { bg = "none" })
    hl(0, "NotifyTRACEBorder", { bg = "none" })
    hl(0, "NotifyERRORIcon", { bg = "none" })
    hl(0, "NotifyWARNIcon", { bg = "none" })
    hl(0, "NotifyINFOIcon", { bg = "none" })
    hl(0, "NotifyDEBUGIcon", { bg = "none" })
    hl(0, "NotifyTRACEIcon", { bg = "none" })
    hl(0, "NotifyERRORTitle", { bg = "none" })
    hl(0, "NotifyWARNTitle", { bg = "none" })
    hl(0, "NotifyINFOTitle", { bg = "none" })
    hl(0, "NotifyDEBUGTitle", { bg = "none" })
    hl(0, "NotifyTRACETitle", { bg = "none" })
    hl(0, "NotifyERRORBody", { bg = "none" })
    hl(0, "NotifyWARNBody", { bg = "none" })
    hl(0, "NotifyINFOBody", { bg = "none" })
    hl(0, "NotifyDEBUGBody", { bg = "none" })
    hl(0, "NotifyTRACEBody", { bg = "none" })
    hl(0, "NotifyLogTime", { bg = "none" })

    hl(0, "StreamlineMode", { fg = get_fg("Constant", "#FFB86C"), bold = true })
    hl(0, "StreamlineGitBranch", { fg = get_fg("Comment", "#8BE9FD"), italic = true })
    hl(0, "StreamlineFilename", { fg = get_fg("Title", "#F1FA8C") })
    hl(0, "StreamlineModified", { fg = get_fg("Error", "#FF5555") })
    hl(0, "StreamlineFiletype", { fg = get_fg("Type", "#BD93F9") })
    hl(0, "StreamlineIndent", { fg = get_fg("Statement", "#50FA7B") })
    hl(0, "StreamlineMacro", { fg = get_fg("Special", "#FF79C6") })
    hl(0, "StreamlineCodecompanionText", { fg = get_fg("Special", "#FF79C6") })
    hl(0, "StreamlineConformEnabled", { fg = get_fg("String", "#50FA7B") })
    hl(0, "StreamlineConformDisabled", { fg = get_fg("Comment", "#6272A4") })
end

vim.api.nvim_create_autocmd("ColorScheme", {
    pattern = "*",
    callback = function()
        M.make_background_transparent()
    end,
})

return M
